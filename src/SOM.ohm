/*
  Ohm grammar for SOM (som-st.github.io), a minimal Smalltalk for teaching and research.

  Based on https://github.com/SOM-st/SOM/blob/190fd72d5509bbfd5c190d3ed091920565cf79ae/specification/SOM.g4
  with some inspiration from https://github.com/moosetechnology/PetitParser/blob/development/src/PetitSmalltalk/PPSmalltalkGrammar.class.st
 */
SOM {
    Classdef =
      identifier equal Superclass InstanceSlots (separator ClassSlots)? endTerm

    Superclass = identifier? newTerm

    InstanceSlots = (or identifier* or)? Method*

    ClassSlots = (or identifier* or)? Method*

    Method = Pattern equal (primitive | MethodBlock)

    Pattern = UnaryPattern | BinaryPattern | KeywordPattern

    UnaryPattern = unarySelector

    BinaryPattern = binarySelector identifier

    KeywordPattern = (keyword identifier)+

    MethodBlock = newTerm BlockContents? endTerm

    BlockContents = (or LocalDefs or)? BlockBody

    LocalDefs = identifier*

    BlockBody =
      | exit Result  -- return
      | Expression (period BlockBody?)? -- rec

    Result = Expression period?

    Expression =
      | variable assign Expression  -- assignment
      | KeywordExpression

    KeywordExpression =
      | KeywordExpression KeywordMessage  -- rec
      | BinaryExpression

    KeywordMessage = (keyword BinaryExpression)+

    BinaryExpression =
      | BinaryExpression BinaryMessage  -- rec
      | UnaryExpression

    BinaryMessage = binarySelector UnaryExpression

    UnaryExpression =
      | UnaryExpression UnaryMessage  -- rec
      | Primary

    UnaryMessage = unarySelector

    Primary = variable | NestedTerm | NestedBlock | Literal

    NestedTerm = newTerm Expression endTerm

    Literal = LiteralArray | LiteralSymbol | LiteralString | LiteralNumber

    LiteralArray = pound newTerm Literal* endTerm

    LiteralNumber =
      | minus? double  -- double
      | minus? integer  -- int

    LiteralSymbol = pound (string | selector)

    LiteralString = string

    NestedBlock = newBlock BlockPattern? BlockContents? endBlock

    BlockPattern = BlockArguments or

    BlockArguments = (colon identifier)+

    // Lexical rules

    selector = unarySelector | binarySelector | keywordSelector

    unarySelector = (primitive | identifier) ~colon
    binarySelector = operatorSequence | operator
    keywordSelector = keyword+
    keyword = identifier colon

    comment = quote (~quote any)* quote
    quote = "\""
    space += comment

    variable = pseudoVariable | identifier

    identifier (an identifier) = letter idRest*
    idRest = letter | digit | "_"

    pseudoVariable = nil | true | false | self | super

    primitive = "primitive" ~idRest
    nil = "nil" ~idRest
    true = "true" ~idRest
    false = "false" ~idRest
    self = "self" ~idRest
    super = "super" ~idRest

    equal = "="

    separator = "----" "-"*

    newTerm = "("
    endTerm = ")"
    or = "|"

    comma = ","
    minus = "-"
    not = "~"
    and = "&"
    star = "*"
    div = "/"
    mod = "\\"
    plus = "+"
    more = ">"
    less = "<"
    at = "@"
    per = "%"

    operator =
      not | and | or | star | div | mod | plus | equal | more | less | comma | at | per | minus
    operatorSequence = operator+

    newBlock = "["
    endBlock = "]"

    colon = ":"
    pound = "#"
    exit = "^"
    period = "."
    assign = ":="

    integer = digit+
    double = digit+ "." digit+

    string = "'" (escapeChar | ~("'" | "\\") any)* "'"

    escapeChar (an escape sequence) =
      | "\\t"  -- tab
      | "\\b"  -- backspace
      | "\\n"  -- lineFeed
      | "\\r"  -- carriageReturn
      | "\\f"  -- formFeed
      | "\\0"  -- null
      | "\\\'"  -- singleQuote
      | "\\\\"  -- backslash
}
