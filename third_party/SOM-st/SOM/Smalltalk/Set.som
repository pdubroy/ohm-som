"

$Id: Set.som 29 2009-07-31 11:28:44Z michael.haupt $

Copyright (c) 2001-2013 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"

Set = (

    | items |
    
    = otherSet = (
        self size = otherSet size ifFalse: [^ false ].
        
        self do: [:item | (otherSet contains: item) ifFalse: [^ false]. ].
        
        ^ true.
    )
    
    add: anObject = (
        (self contains: anObject)
            ifFalse: [ items append: anObject ]
    )
    
    addAll: aCollection = (
        aCollection do: [:each |
            self add: each]
    )
    
    union: aCollection = (
        | new |
        new := Set new.
        new addAll: self.
        new addAll: aCollection.
        ^ new
    )
    
    intersection: aCollection = (
        | new |
        new := Set new.
        self do: [:it | 
            (aCollection contains: it) ifTrue: [ new add: it ]].
        ^ new
    )
    
    - aCollection = ( "set difference"
        | new |
        new := Set new.
        self do: [:it |
            (aCollection contains: it) ifFalse: [ new add: it ]].
        ^ new
    )
    
    contains: anObject = (
        items do: [ :it | it == anObject ifTrue: [ ^true ] ].
        ^false
    )
    
    remove: anObject = (
        | newItems |
        newItems := Vector new.
        [ items isEmpty ]
            whileFalse: [ | it |
                it := items remove.
                it = anObject ifFalse: [ newItems append: it ] ].
        items := newItems
    )
    
    "Sets do not have the notion of ordering, but
     for convenience we provide those accessors"
    first = (
        ^items at: 1
    )
    
    isEmpty = (
               ^items isEmpty
    )
    
    "Iteration"
    do: block = ( items do: block )
    
    "Collection"
    collect: block = ( | coll |
        coll := Vector new.
        self do: [ :e | coll append: (block value: e) ].
        ^coll
    )
    
    "Printing"
    println = (
        '(' print.
        self do: [ :it | '(' print. it print. ')' print ].
        ')' println
    )
    
    asString = (
        | result |
        result := 'a Set('.
        items do: [:e | result := result + e asString + ', '].
        result := result + ')'.
        ^ result
    )
    
    size = (
        ^ items size
    )
    
    "Private"
    items: it = ( items := it )
    
    ----
    
    new = (
        | newSet |
        newSet := super new.
        newSet items: Vector new.
        ^newSet
    )
    
)
