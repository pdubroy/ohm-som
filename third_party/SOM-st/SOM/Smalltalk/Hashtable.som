"

$Id: Hashtable.som 29 2009-07-31 11:28:44Z michael.haupt $

Copyright (c) 2001-2013 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"

Hashtable = (

    | table count |
    
    "Testing"
    containsKey: key = ( | idx e |
        idx := self indexForKey: key.
        e := table at: idx.
        e isNil ifFalse: [ e keys do: [ :k | k = key ifTrue: [ ^true ] ] ].
        ^false.
    )
    
    containsValue: val = ( 
        table do: [ :ent | 
            ent isNil ifFalse: [ 
                ent values do: [ :v | v = val ifTrue: [ ^true ] ] ] ].
        ^false.
    )
    
    isEmpty = ( ^count = 0 )
    size = ( ^count )
    
    "Accessing"
    get: key = ( | idx e |
        idx := self indexForKey: key.
        e := table at: idx.
        e isNil ifTrue: [ ^nil ].
        ^e getValue: key.
    )
    
    at: key put: value = ( | idx |
        idx := self indexForKey: key.
        (table at: idx) isNil
            ifTrue: [
                table at: idx put:
                    (HashEntry newKey: key value: value next: nil).
                count := count + 1 ]
            ifFalse: [
                ((table at: idx) setKey: key value: value)
                    ifTrue: [ count := count + 1 ] ].
        "TODO: enlarge table, rehash if too large"
    )
    
    "TODO: some way to delete keys'd be nice..."
    
    "Enumerate"
    keys = ( | vec |
        vec := Vector new.
        table do: [ :ent | 
            ent isNil ifFalse: [ ent keys do: [ :k | vec append: k ] ] ].
        ^vec.
    )
    
    values = ( | vec |
        vec := Vector new.
        table do: [ :ent | 
            ent isNil ifFalse: [ ent values do: [ :v | vec append: v ] ] ].
        ^vec.
    )
    
    "Clearing"
    clear = ( table := Array new: 11. 
              count := 0 )
    
    "Private"
    indexForKey: aKey = ( ^(aKey hashcode % table length) abs + 1 )
    
    ----------------
    
    "Allocation"
    new = ( | ht |
        ht := super new.
        ht clear.
        ^ht.
    )
    
)
