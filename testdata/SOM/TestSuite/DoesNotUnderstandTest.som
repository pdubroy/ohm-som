DoesNotUnderstandTest = TestCase (

  testSimpleUnknownFoo = (
    | result |
    result := self foo.
    self assert: DoesNotUnderstandMessage is: result class.
    self assert: self is: result target.
    self assert: #foo is: result selector.
  )
  
  testArguments = (
    | result |
    result := self foo.
    self assert: Array is: result arguments class.
    self assert: 0 equals: result arguments length.

    result := self foo: 1.
    self assert: 1 equals: result arguments length.
    self assert: 1 equals: (result arguments at: 1).
    
    result := self foo: 1 bar: 2 baz: 3.
    self assert: 3 equals: result arguments length.
    self assert: 1 equals: (result arguments at: 1).
    self assert: 2 equals: (result arguments at: 2).
    self assert: 3 equals: (result arguments at: 3).
  )
  
  testRepeat = (
    | result |
    result := Array new: 5.
    1 to: result length do: [:i |
      result at: i put: self foo.
      
      i > 1 ifTrue: [
        self assert: (result at: i - 1) ~= (result at: i).
      ]
    ].
  )
  
  doesNotUnderstand: selector arguments: arguments = (
      ^ DoesNotUnderstandMessage to: self selector: selector arguments: arguments.
  )
)
